{"version":3,"sources":["test/jasmine/jasmine-matchers.js"],"names":["beforeEach","matchers","priv","each","array","fn","i","len","length","call","all","some","expectAllMembers","assertion","actual","item","is","subject","type","Object","prototype","toString","isHtmlElementOfType","nodeType","toArray","list","slice","createToBeArrayOfXsMatcher","toBeX","toBeArray","Array","toBeArrayOfSize","size","toBeEmptyArray","toBeNonEmptyArray","toBeArrayOfObjects","toBeArrayOfStrings","toBeArrayOfNumbers","toBeArrayOfBooleans","toBeBoolean","toBeTrue","toBeFalse","Boolean","valueOf","toBeWindow","window","toBeDocument","document","toBeHtmlNode","toBeHtmlTextNode","toBeHtmlCommentNode","toBeDate","Date","toBeIso8601","toBeString","toISOString","toBeBefore","date","getTime","toBeAfter","toThrowAnyError","threwError","e","toThrowErrorOfType","threwErrorOfType","name","assertMember","matcherName","args","arguments","memberName","shift","toBeObject","apply","toBeNumber","isNaN","parseFloat","toBeEvenNumber","toBeOddNumber","toBeCalculable","toBeWithinRange","floor","ceiling","toBeWholeNumber","toImplement","api","required","toBeFunction","Function","toBeEmptyString","toBeNonEmptyString","toBeHtmlString","search","toBeJsonString","isParseable","json","JSON","parse","toBeWhitespace","toStartWith","expected","toEndWith","toBeLongerThan","other","toBeShorterThan","toBeSameLengthAs","isJasmineV1","addMatchers","isJasmineV2","jasmine","v2Matchers","compare","scope","pass"],"mappings":"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","file":"jasmine-matchers.f4344334.js","sourceRoot":"..","sourcesContent":["/*\n * Copyright © 2013 Jamie Mason, @fold_left,\n * https://github.com/JamieMason\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation files\n * (the \"Software\"), to deal in the Software without restriction,\n * including without limitation the rights to use, copy, modify, merge,\n * publish, distribute, sublicense, and/or sell copies of the Software,\n * and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nbeforeEach(function() {\n\n  var matchers = {};\n  var priv = {};\n\n  priv.each = function(array, fn) {\n    var i;\n    var len = array.length;\n    if ('length' in array) {\n      for (i = 0; i < len; i++) {\n        fn.call(this, array[i], i, array);\n      }\n    } else {\n      for (i in array) {\n        fn.call(this, array[i], i, array);\n      }\n    }\n  };\n\n  priv.all = function(array, fn) {\n    var i;\n    var len = array.length;\n    for (i = 0; i < len; i++) {\n      if (fn.call(this, array[i], i, array) === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  priv.some = function(array, fn) {\n    var i;\n    var len = array.length;\n    for (i = 0; i < len; i++) {\n      if (fn.call(this, array[i], i, array) === true) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  priv.expectAllMembers = function(assertion) {\n    return priv.all.call(this, this.actual, function(item) {\n      return matchers[assertion].call({\n        actual: item\n      });\n    });\n  };\n\n  /**\n   * Assert subject is of type\n   * @param  {Mixed} subject\n   * @param  {String} type\n   * @return {Boolean}\n   */\n\n  priv.is = function(subject, type) {\n    return Object.prototype.toString.call(subject) === '[object ' + type + ']';\n  };\n\n  /**\n   * Assert subject is an HTML Element with the given node type\n   * @return {Boolean}\n   */\n\n  priv.isHtmlElementOfType = function(subject, type) {\n    return subject && subject.nodeType === type;\n  };\n\n  /**\n   * Convert Array-like Object to true Array\n   * @param  {Mixed[]} list\n   * @return {Array}\n   */\n\n  priv.toArray = function (list) {\n    return [].slice.call(list);\n  };\n\n  // Arrays\n  // ---------------------------------------------------------------------------\n\n  priv.createToBeArrayOfXsMatcher = function (toBeX) {\n    return function () {\n      return matchers.toBeArray.call(this) && priv.expectAllMembers.call(this, toBeX);\n    };\n  };\n\n  /**\n   * Assert subject is an Array (from this document, eg Arrays from iframes\n   * or popups won't match)\n   * @return {Boolean}\n   */\n  matchers.toBeArray = function () {\n    return this.actual instanceof Array;\n  };\n\n  /**\n   * Assert subject is an Array with a defined number of members\n   * @param  {Number} size\n   * @return {Boolean}\n   */\n  matchers.toBeArrayOfSize = function (size) {\n    return matchers.toBeArray.call(this) && this.actual.length === size;\n  };\n\n  /**\n   * Assert subject is an Array, but with no members\n   * @return {Boolean}\n   */\n  matchers.toBeEmptyArray = function () {\n    return matchers.toBeArrayOfSize.call(this, 0);\n  };\n\n  /**\n   * Assert subject is an Array with at least one member\n   * @return {Boolean}\n   */\n  matchers.toBeNonEmptyArray = function () {\n    return matchers.toBeArray.call(this) && this.actual.length > 0;\n  };\n\n  /**\n   * Assert subject is an Array which is either empty or contains only Objects\n   * @return {Boolean}\n   */\n  matchers.toBeArrayOfObjects = priv.createToBeArrayOfXsMatcher('toBeObject');\n\n  /**\n   * Assert subject is an Array which is either empty or contains only Strings\n   * @return {Boolean}\n   */\n  matchers.toBeArrayOfStrings = priv.createToBeArrayOfXsMatcher('toBeString');\n\n  /**\n   * Assert subject is an Array which is either empty or contains only Numbers\n   * @return {Boolean}\n   */\n  matchers.toBeArrayOfNumbers = priv.createToBeArrayOfXsMatcher('toBeNumber');\n\n  /**\n   * Assert subject is an Array which is either empty or contains only Booleans\n   * @return {Boolean}\n   */\n  matchers.toBeArrayOfBooleans = priv.createToBeArrayOfXsMatcher('toBeBoolean');\n\n  // Booleans\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Assert subject is not only truthy or falsy, but an actual Boolean\n   * @return {Boolean}\n   */\n  matchers.toBeBoolean = function() {\n    return matchers.toBeTrue.call(this) || matchers.toBeFalse.call(this);\n  };\n\n  /**\n   * Assert subject is not only truthy, but an actual Boolean\n   * @return {Boolean}\n   */\n  matchers.toBeTrue = function() {\n    return this.actual === true || this.actual instanceof Boolean && this.actual.valueOf() === true;\n  };\n\n  /**\n   * Assert subject is not only falsy, but an actual Boolean\n   * @return {Boolean}\n   */\n  matchers.toBeFalse = function() {\n    return this.actual === false || this.actual instanceof Boolean && this.actual.valueOf() === false;\n  };\n\n  // Browser\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Assert subject is the window global\n   * @return {Boolean}\n   */\n  matchers.toBeWindow = function() {\n    return typeof window !== 'undefined' && this.actual === window;\n  };\n\n  /**\n   * Assert subject is the document global\n   * @return {Boolean}\n   */\n  matchers.toBeDocument = function() {\n    return typeof document !== 'undefined' && this.actual === document;\n  };\n\n  /**\n   * Assert subject is an HTML Element\n   * @return {Boolean}\n   */\n  matchers.toBeHtmlNode = function() {\n    return priv.isHtmlElementOfType(this.actual, 1);\n  };\n\n  /**\n   * Assert subject is an HTML Text Element\n   * @return {Boolean}\n   */\n  matchers.toBeHtmlTextNode = function() {\n    return priv.isHtmlElementOfType(this.actual, 3);\n  };\n\n  /**\n   * Assert subject is an HTML Text Element\n   * @return {Boolean}\n   */\n  matchers.toBeHtmlCommentNode = function() {\n    return priv.isHtmlElementOfType(this.actual, 8);\n  };\n\n  /**\n   * Assert subject is a Date\n   * @return {Boolean}\n   */\n  matchers.toBeDate = function() {\n    return this.actual instanceof Date;\n  };\n\n  /**\n   * Assert subject is a Date String conforming to the ISO 8601 standard\n   * @return {Boolean}\n   */\n  matchers.toBeIso8601 = function() {\n    return matchers.toBeString.call(this)\n      && this.actual.length >= 10\n      && new Date(this.actual).toString() !== 'Invalid Date'\n      && new Date(this.actual).toISOString().slice(0, this.actual.length) === this.actual;\n  };\n\n  /**\n   * Assert subject is a Date occurring before another Date\n   * @param {Date} date\n   * @return {Boolean}\n   */\n  matchers.toBeBefore = function(date) {\n    return matchers.toBeDate.call(this) && matchers.toBeDate.call({ actual: date }) && this.actual.getTime() < date.getTime();\n  };\n\n  /**\n   * Assert subject is a Date occurring after another Date\n   * @param {Date} date\n   * @return {Boolean}\n   */\n  matchers.toBeAfter = function(date) {\n    return matchers.toBeBefore.call({ actual: date }, this.actual);\n  };\n\n  // Errors\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Asserts subject throws an Error of any type\n   * @return {Boolean}\n   */\n  matchers.toThrowAnyError = function() {\n    var threwError = false;\n    try {\n      this.actual();\n    } catch (e) {\n      threwError = true;\n    }\n    return threwError;\n  };\n\n  /**\n   * Asserts subject throws an Error of a specific type, such as 'TypeError'\n   * @param  {String} type\n   * @return {Boolean}\n   */\n  matchers.toThrowErrorOfType = function(type) {\n    var threwErrorOfType = false;\n    try {\n      this.actual();\n    } catch (e) {\n      threwErrorOfType = (e.name === type);\n    }\n    return threwErrorOfType;\n  };\n\n  // Members\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Assert subject is an Object containing an Array at memberName\n   * @name toHaveArray\n   * @param {String} memberName\n   * @return {Boolean}\n   */\n\n  /**\n   * Assert subject is an Object containing an Array of size at memberName\n   * @name toHaveArrayOfSize\n   * @param {String} memberName\n   * @param {Number} size\n   * @return {Boolean}\n   */\n\n  /**\n   * Assert subject is an Object containing an Array at memberName with no members\n   * @name toHaveEmptyArray\n   * @param {String} memberName\n   * @return {Boolean}\n   */\n\n  /**\n   * Assert subject is an Object containing an Array at memberName with at least one member\n   * @name toHaveNonEmptyArray\n   * @param {String} memberName\n   * @return {Boolean}\n   */\n\n  /**\n   * Assert subject is an Object containing an Array at memberName where no member is not an Object\n   * @name toHaveArrayOfObjects\n   * @param {String} memberName\n   * @return {Boolean}\n   */\n\n  /**\n   * Assert subject is an Object containing an Array at memberName where no member is not a String\n   * @name toHaveArrayOfStrings\n   * @param {String} memberName\n   * @return {Boolean}\n   */\n\n  /**\n   * Assert subject is an Object containing an Array at memberName where no member is not a Number\n   * @name toHaveArrayOfNumbers\n   * @param {Number} memberName\n   * @return {Boolean}\n   */\n\n  /**\n   * Assert subject is an Object containing an Array at memberName where no member is not a Boolean\n   * @name toHaveArrayOfBooleans\n   * @param {Boolean} memberName\n   * @return {Boolean}\n   */\n\n  /**\n   * @param  {String} matcherName\n   * @return {Function}\n   */\n\n  function assertMember(matcherName) {\n    return function() {\n      var args = priv.toArray(arguments);\n      var memberName = args.shift();\n      return matchers.toBeObject.call(this) && matchers[matcherName].apply({\n        actual: this.actual[memberName]\n      }, args);\n    };\n  }\n\n  priv.each([\n    'Array',\n    'ArrayOfSize',\n    'EmptyArray',\n    'NonEmptyArray',\n    'ArrayOfObjects',\n    'ArrayOfStrings',\n    'ArrayOfNumbers',\n    'ArrayOfBooleans'\n  ], function(matcherName) {\n    matchers['toHave' + matcherName] = assertMember('toBe' + matcherName);\n  });\n\n  // Numbers\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Assert subject is not only calculable, but an actual Number\n   * @return {Boolean}\n   */\n  matchers.toBeNumber = function() {\n    return !isNaN(parseFloat(this.actual)) && !priv.is(this.actual, 'String');\n  };\n\n  /**\n   * Assert subject is an even Number\n   * @return {Boolean}\n   */\n  matchers.toBeEvenNumber = function() {\n    return matchers.toBeNumber.call(this) && this.actual % 2 === 0;\n  };\n\n  /**\n   * Assert subject is an odd Number\n   * @return {Boolean}\n   */\n  matchers.toBeOddNumber = function() {\n    return matchers.toBeNumber.call(this) && this.actual % 2 !== 0;\n  };\n\n  /**\n   * Assert subject can be used in Mathemetic calculations, despite not being an actual Number.\n   * @example \"1\" * \"2\" === 2 (pass)\n   * @example \"wut?\" * \"2\" === NaN (fail)\n   * @return {Boolean}\n   */\n  matchers.toBeCalculable = function() {\n    return !isNaN(this.actual * 2);\n  };\n\n  /**\n   * Assert value is >= floor or <= ceiling\n   * @param {Number} floor\n   * @param {Number} ceiling\n   * @return {Boolean}\n   */\n  matchers.toBeWithinRange = function(floor, ceiling) {\n    return matchers.toBeNumber.call(this) && this.actual >= floor && this.actual <= ceiling;\n  };\n\n  /**\n   * Assert value is a number with no decimal places\n   * @return {Boolean}\n   */\n  matchers.toBeWholeNumber = function() {\n    return matchers.toBeNumber.call(this) && (this.actual === 0 || this.actual % 1 === 0);\n  };\n\n  // Objects\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Assert subject is an Object, and not null\n   * @return {Boolean}\n   */\n  matchers.toBeObject = function() {\n    return this.actual instanceof Object;\n  };\n\n  /**\n   * Assert subject features the same public members as api.\n   * @param  {Object|Array} api\n   * @return {Boolean}\n   */\n  matchers.toImplement = function(api) {\n    var required;\n    if (!this.actual || !api) {\n      return false;\n    }\n    for (required in api) {\n      if ((required in this.actual) === false) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Assert subject is a function\n   * @return {Boolean}\n   */\n  matchers.toBeFunction = function() {\n    return this.actual instanceof Function;\n  };\n\n  // Strings\n  // ---------------------------------------------------------------------------\n\n  /**\n   * Assert subject is a String\n   * @return {Boolean}\n   */\n  matchers.toBeString = function() {\n    return priv.is(this.actual, 'String');\n  };\n\n  /**\n   * @return {Boolean}\n   */\n  matchers.toBeEmptyString = function() {\n    return this.actual === '';\n  };\n\n  /**\n   * @return {Boolean}\n   */\n  matchers.toBeNonEmptyString = function() {\n    return matchers.toBeString.call(this) && this.actual.length > 0;\n  };\n\n  /**\n   * Assert subject is string containing HTML Markup\n   * @return {Boolean}\n   */\n  matchers.toBeHtmlString = function() {\n    return matchers.toBeString.call(this) && this.actual.search(/<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/) !== -1;\n  };\n\n  /**\n   * Assert subject is string containing parseable JSON\n   * @return {Boolean}\n   */\n  matchers.toBeJsonString = function() {\n    var isParseable;\n    var json;\n    try {\n      json = JSON.parse(this.actual);\n    } catch (e) {\n      isParseable = false;\n    }\n    return isParseable !== false && json !== null;\n  };\n\n  /**\n   * Assert subject is a String containing nothing but whitespace\n   * @return {Boolean}\n   */\n  matchers.toBeWhitespace = function() {\n    return matchers.toBeString.call(this) && this.actual.search(/\\S/) === -1;\n  };\n\n  /**\n   * Assert subject is a String whose first characters match our expected string\n   * @param  {String} expected\n   * @return {Boolean}\n   */\n  matchers.toStartWith = function (expected) {\n    if (!matchers.toBeNonEmptyString.call(this) || !matchers.toBeNonEmptyString.call({ actual: expected })) {\n      return false;\n    }\n    return this.actual.slice(0, expected.length) === expected;\n  };\n\n  /**\n   * Assert subject is a String whose last characters match our expected string\n   * @param  {String} expected\n   * @return {Boolean}\n   */\n  matchers.toEndWith = function (expected) {\n    if (!matchers.toBeNonEmptyString.call(this) || !matchers.toBeNonEmptyString.call({ actual: expected })) {\n      return false;\n    }\n    return this.actual.slice(this.actual.length - expected.length, this.actual.length) === expected;\n  };\n\n  /**\n   * Assert subject is a String whose length is greater than our other string\n   * @param  {String} other\n   * @return {Boolean}\n   */\n  matchers.toBeLongerThan = function (other) {\n    return matchers.toBeString.call(this) && matchers.toBeString.call({\n      actual: other\n    }) && this.actual.length > other.length;\n  };\n\n  /**\n   * Assert subject is a String whose length is less than our other string\n   * @param  {String} other\n   * @return {Boolean}\n   */\n  matchers.toBeShorterThan = function (other) {\n    return matchers.toBeString.call(this) && matchers.toBeString.call({\n      actual: other\n    }) && this.actual.length < other.length;\n  };\n\n  /**\n   * Assert subject is a String whose length is equal to our other string\n   * @param  {String} other\n   * @return {Boolean}\n   */\n  matchers.toBeSameLengthAs = function (other) {\n    return matchers.toBeString.call(this) && matchers.toBeString.call({\n      actual: other\n    }) && this.actual.length === other.length;\n  };\n\n\n  // Create adapters for the original matchers so they can be compatible with Jasmine 2.0.\n\n  var isJasmineV1 = typeof this.addMatchers === 'function';\n  var isJasmineV2 = typeof jasmine.addMatchers === 'function';\n  var v2Matchers = {};\n\n  if (isJasmineV1) {\n    this.addMatchers(matchers);\n  } else if (isJasmineV2) {\n    priv.each(matchers, function(fn, name) {\n      v2Matchers[name] = function() {\n        return {\n          compare: function(actual, expected) {\n            var args = priv.toArray(arguments);\n            var scope = {\n              actual: actual\n            };\n            args.shift();\n            return {\n              pass: matchers[name].apply(scope, args)\n            };\n          }\n        };\n      };\n    });\n    jasmine.addMatchers(v2Matchers);\n  }\n\n});\n"]}